#!/usr/bin/env python

"""
Centralized class for update to cluster config files. this command
is typically called with flock on the same machine to prevent multiple
simultaneous editors
"""

__author__ = 'edelman@room77.com (Nicholas Edelman)'
__copyright__ = 'Copyright 2013 Room77, Inc.'

import getpass
import os
import yaml

import r77_init # pylint: disable=W0611
from pylib.base.flags import Flags
from pylib.base.exec_utils import ExecUtils
from pylib.base.term_color import TermColor
from pylib.prod.cluster.cluster import Cluster
from pylib.util.git_util import GitUtil

class Error(Exception):
  def __init__(self, value):
    self.value = value

  def __str__(self):
    return "'%s'" % self.value

class UpdateConfig(object):
  CLUSTER_DIR = 'prod/cluster/conf'
  # path to the config files
  DEPLOYSPECS_PATH = os.path.join(CLUSTER_DIR, 'deployspecs.yaml')
  RELEASES_PATH = os.path.join(CLUSTER_DIR, 'releases.yaml')

  def __init__(self, required_user, branch_name, verbose):
    self._repo_root = GitUtil.repo_root()
    self._cluster_root = os.path.join(
      self._repo_root, self.CLUSTER_DIR)
    self._verbose = verbose
    if not required_user == getpass.getuser():
      raise Error(TermColor.ColorStr(
        'command MUST be run as user %s' % required_user,
        'RED'))
    GitUtil.checkout_branch(branch_name)

  def deployspecs_update(self, deployspec_name, cluster_name, release_name):
    """
    Args:
      deployspec_name (string) - the deployspec to create or update
      cluster_name (string) - the cluster in the deployspec
      release_name (string) - the release in the deployspec
    """
    # update the releases file
    with open(self.DEPLOYSPECS_PATH, 'r') as f:
      deployspecs = yaml.safe_load(f)
    if not deployspec_name in deployspecs:
      deployspecs[deployspec_name] = {}
    # nothing to be done if already updated.
    if 'cluster' in deployspecs[deployspec_name] and \
       'release' in deployspecs[deployspec_name] and \
       deployspecs[deployspec_name]['cluster'] == cluster_name and \
       deployspecs[deployspec_name]['release'] == release_name:
      return
    deployspecs[deployspec_name]['cluster'] = cluster_name
    deployspecs[deployspec_name]['release'] = release_name
    # write back to a file
    with open(self.DEPLOYSPECS_PATH, 'w') as f:
      f.write(yaml.safe_dump(deployspecs, default_flow_style=False))
    # commit the deployspecs
    GitUtil.commit_push(
      [self.DEPLOYSPECS_PATH],
      'updating deployspecs.yaml for deployspec %s, cluster %s, release %s' % (
      deployspec_name, cluster_name, release_name))

  def release_update(self, release_name, pkgs):
    """
    Args:
      release_name (string) - the name of the release to update
      pkgs (dict) - map from release name to release version
    """
    # update the releases file
    with open(self.RELEASES_PATH, 'r') as f:
      releases = yaml.safe_load(f)
    if not release_name in releases:
      if self._verbose:
        print 'release name %s not in releases' % release_name
      releases[release_name] = {}
    pkg_names = ['cluster']
    all_same = True
    for pkg_name, pkg_ver in pkgs.iteritems():
      if not pkg_name in releases[release_name] or \
         not releases[release_name][pkg_name] == pkg_ver:
        if self._verbose:
          print 'pkg_ver %s is new or pkg_name %s is new for release %s' % (
            pkg_ver, pkg_name, release_name)
        all_same = False
      releases[release_name][pkg_name] = pkg_ver
      pkg_names += [ pkg_name ]
    # if all the packages are the same. nothing needs to be done.
    if all_same:
      print 'nothing is different. no releases file needs to be updated'
      return
    # write back to a file
    with open(self.RELEASES_PATH, 'w') as f:
      f.write(yaml.safe_dump(releases, default_flow_style=False))
    # update the cluster config in the release. need to dive back into the
    # root so flash run can be called
    Cluster.generate_cluster_pkg(
      releases, release_name,
      self.RELEASES_PATH)
    # commit the updates
    GitUtil.commit_push(
      [self.RELEASES_PATH],
      'updating releases.yaml for release %s and packages %s' % (
      release_name, ' '.join(pkg_names)))

if __name__ == '__main__':
  # setup the parser
  parser = Flags.PARSER
  parser.add_argument('--required_user', default='r77',
                      help='The required user for running the command')
  parser.add_argument('--verbose', action='store_true')
  parser.add_argument('branch_name',
                      help='the name of the branch to update')
  # subparsers
  subparsers = parser.add_subparsers(help='sub-command help')
  p = subparsers.add_parser('deployspecs')
  p.set_defaults(cmd='deployspecs')
  p.add_argument('deployspec_name', help='the name of the deployspec to update')
  p.add_argument('cluster_name', help='the name of the cluster in the deployspec')
  p.add_argument('release_name', help='the name of the release in the deployspec')

  p = subparsers.add_parser('releases')
  p.set_defaults(cmd='releases')
  p.add_argument('release_name', help='the name of the release to update')
  p.add_argument('release_pkgs', nargs='*',
                 help=(
    'space separated list of '
    '[package_name1 package_version1 ... package_nameN package_versionN]'))
  # parse the arguments
  Flags.InitArgs()
  args = Flags.ARGS
  # update the configuration
  uc = UpdateConfig(args.required_user, args.branch_name, args.verbose)
  if args.cmd == 'releases':
    if not args.release_pkgs:
      raise Error(TermColor.ColorStr(
        'no release_pkgs specified!', 'RED'))
    if not len(args.release_pkgs) % 2 == 0:
      raise Error(TermColor.ColorStr(
        'an odd number of release pkgs specified. this MUST be a corresponding '
        'version for every package. input: %s' % ' '.join(args.release_pkgs),
        'RED'))
    release_pkgs = {}
    evens = [ x for x in range(0, len(args.release_pkgs)) if x % 2 == 0 ]
    for i in evens:
      release_pkgs[args.release_pkgs[i]] = args.release_pkgs[i+1]
    uc.release_update(args.release_name, release_pkgs)
  elif args.cmd == 'deployspecs':
    uc.deployspecs_update(
      args.deployspec_name, args.cluster_name, args.release_name)
  else:
    raise Error(TermColor.ColorStr('unknown command: %s' % args.cmd, 'RED'))
